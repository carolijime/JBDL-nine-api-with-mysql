package com.example.jbdlnineapiwithmysql.repository;

import com.example.jbdlnineapiwithmysql.model.Person;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

@Repository
public class PersonRepository {

    private static Logger logger = LoggerFactory.getLogger(PersonRepository.class);

    private PreparedStatement createStatement;
    @Autowired
    private  Connection connection;

    /**
     * Insert / Update / Delete - ExecuteUpdate
     * Select - ExecuteQuery
     */

    // JDBC : Protocol which is used from Java application to relational db
    // JDBCTemplate : Dependency which allows you to map your java object to db relation just like hibernate

    //Code below has been replaced for the DB config autowired connection bean
//    PersonRepository() throws SQLException {
//        this.connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/jbdl33_person", "root", "7u6iwTmjisGoAi");
//    }

    // create table in mysql
    //Needs to make field injection (connection in the parameters of the function) so it will create the connection
    // before trying to create the table
    // database needs to be created from the terminal before running program
    PersonRepository(Connection connection) throws SQLException {
        this.connection = connection;
        createTable();
        this.createStatement = connection.prepareStatement(
                "insert into person (first_name, last_name, age, dob) " +
                        "VALUES (?, ?, ?, ?)"
        );
    }

    public void createPerson(Person p){
        try {
            //Mapping our java class to the DB
            //id should be autogenerated by the DB
//            createStatement.setInt(1, p.getId());
            createStatement.setString(1, p.getFirstName());
            createStatement.setString(2, p.getLastName());
            createStatement.setInt(3, p.getAge());
            createStatement.setString(4, p.getDob());

            int result = createStatement.executeUpdate();

            logger.info("Insert statement result - {}", result >= 1 ? true : false);

        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    //static query that creates always the same person
    public void createPersonStatic(Person p){
        //DB Operations here
        //1. DB Connection
        try {
            Statement statement = connection.createStatement();
            int result = statement.executeUpdate("insert into person (id, first_name, last_name, age, dob) " +
                    "VALUES (1, 'ABC', 'DEF', 20, '1990-01-01')");

            logger.info("Insert statement result - {}", result >= 1 ? true : false);

        } catch (SQLException e) {
//            throw new RuntimeException(e);
            e.printStackTrace();
        }

    }

    public Person getPersonById(int pId){
        try {
            PreparedStatement statement = connection.prepareStatement("select * from person where id = ?");
            statement.setInt(1,pId);
            //executeQuery gives a resultset (do  not use it for updates or deletions where you would like to
            // know the number of affected rows, because that information will not be provided
            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()){
                return getPersonFromResultSet(resultSet);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return null;
    }

    public List<Person> getPeople() {
        try {
            Statement statement = connection.createStatement();
            //executeQuery gives a resultset (do  not use it for updates or deletions where you would like to
            // know the number of affected rows, because that information will not be provided
            ResultSet resultSet = statement.executeQuery("select * from person");

            List<Person> personList = new ArrayList<>();

            while (resultSet.next()){
                Person person = getPersonFromResultSet(resultSet);
                personList.add(person);
            }

            return personList;

        } catch (SQLException e) {
            e.printStackTrace();
//            throw new RuntimeException(e);
        }

        return null;
    }

    private  Person getPersonFromResultSet(ResultSet resultSet) throws SQLException {
        // Mapping our db to the java class
        String firstName = resultSet.getString("first_name"); //safer option
        String lastName = resultSet.getString("last_name");
        int id = resultSet.getInt("id");
        int age = resultSet.getInt(4);
        String dob = resultSet.getString(5);
//                String first_name = resultSet.getString(2); //no that good option

        return Person.builder()
                .firstName(firstName)
                .lastName(lastName)
                .age(age)
                .id(id)
                .dob(dob)
                .build();
    }

    public boolean delete(int pId) {
        try {
            PreparedStatement statement = connection.prepareStatement("delete from person where id = ?");
            statement.setInt(1,pId);
            //executeQuery gives a resultset (do  not use it for updates or deletions where you would like to
            // know the number of affected rows, because that information will not be provided
            int result = statement.executeUpdate();
            logger.info("Insert statement result - {}", result >= 1 ? true : false);
            return result >= 1 ? true : false;
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return false;
    }

    //Static queries
    private void createTable() throws SQLException {
        Statement statement = connection.createStatement();
        statement.execute("create table if not exists person (id int primary key auto_increment, first_name varchar(30), last_name varchar(30), age int, dob varchar(12))");
    }

}
